# ------------- FILE OPTIONS -------------

# Relative or absolute paths to ffmpeg.exe and ffprobe.exe
# Will work without ffprobe, but features that require info about the input file will not be available. Others may use unoptimal defaults.
ffmpeg=ffmpeg.exe
ffprobe=ffprobe.exe

# Relative or absolute paths to source files or folders separated by \n.
# Each folder will include all files in all subfolders. Each file will be converted separately.
inputFiles=

# The directory in which the converted files will be placed.
# Any input files that were specified as a directory will have the directory included too.
# If empty, the converted files will be placed alongside the source files.
outputDirectory=
# Whether to create the output directory if it doesn't exist
# true / false
createDirectoryIfNeeded=true

# The strings added before and/or after the input file name(s) to make the output file name(s)
outputPrefix=
outputSuffix= out

# The file extension. Usually specifies the container.
# Can be any string. If empty, no leading dot is included.
# Some popular examples:
# mkv - Matroska - Supports most formats, usually a safe choice, but doesn't work in browsers.
# webm - Subset of Matroska that works in web browsers - supports VP8, VP9, AV1 video, and Vorbis (ogg) and Opus audio.
# mp4 - MPEG-4 - Common container that support many formats (H.264, H.265, AV1 video, AAC, MP3, FLAC, Opus audio, and others). Allows H.264 and H.265 playback in browsers.
outputExtension=webm

# Whether to overwrite any existing files. Will never overwrite the source files.
# true / false
overwrite=true

# Whether to output the ffmpeg command instead of actually encoding anything.
# true / false
simulate=false



# ------------- FILTER OPTIONS -------------

# Color range of the video. Recommended to leave blank or set to full.
# Leave blank for automatic (usually copies the input)
# limited - Uses fewer colors for compatibility with analog signals and older software.
# full - Uses all the colors.
colorRange=

# The start and end time or duration of the file. These apply to the input not the output, which matters in case you change the speed.
# Leaving the start or end time empty will use the start or end of the file.
# Specified as hours (optional) : minutes (optional) : seconds . decimals of a second (optional)
# e.g. 1:55:01.5 (1 hour, 55 minutes, 1.5 seconds) or 150 (150 seconds)
startTime=
endTime=
# Overrides the end time, if specified
duration=

# The width and height of the cropped video in pixels.
# You can also use expressions containing numbers, mathematical operators, and constants iw, ih, ow, oh, corresponding to the input and output width and height.
# e.g. cropWidth=oh*16/9
# More details and options available at https://ffmpeg.org/ffmpeg-all.html#crop
cropWidth=
cropHeight=
# How many pixels are cropped from the left and top sides (the rest are cropped from the right and bottom sides to match the specified width and height).
# Can be left blank, in which case the cropped area will be centered.
# Can also use all the expressions mentioned above, as well as constants x and y, corresponding to the values of cropLeft and cropTop.
cropLeft=
cropTop=

# The width and height of the output video in pixels. This is applied after cropping.
# Leaving either blank will use the input width or height.
# If only one value is set to -1, it will maintain the aspect ratio of the video and calculate the value based on the other dimension.
# You can also use expressions, same as cropWidth and cropHeight.
# More details and options available at https://ffmpeg.org/ffmpeg-all.html#scale
width=
height=

# The playback rate for the video and audio. Does not change the framerate.
# Must be floating point number, at least 0.001. Values below 1 slow the video and audio down, and values above 1 speed them up.
tempo=1

# The framerate of the output video as frames per second. Applied after tempo, and drops or duplicates frames as necessary.
# Must be a positive integer or a fraction, e.g. 30000/1001
framerate=

# Whether to blend successive frames together for a smoother look in case the output would have a lower framerate than the input.
# Requires ffprobe
# true / false
blendFrames=false

# Whatever filters you want to add to the beginning or end of the filterchain.
# These will be properly separated from the other filters with a comma, but otherwise you are responsible for all the correct syntax.
videoFilterPrepend=
videoFilterAppend=



# ------------- VIDEO OPTIONS -------------

# The encoder for the video. Specifies the video codec.
# Can be any string that's supported by your ffmpeg installation, but I only support the following popular ones. Others may work with limited confiuration options.
# Leaving this option empty will not encode a video stream.
# copy - Copies the video stream without reencoding.  No other video options will be applied and trimming may not work well.
# libvpx-vp9 - VP9 - Well-supported and fairly efficient codec
# libsvtav1, libaom-av1 - AV1 - Mostly supported codec that's slower to encode but is more compact. Has two different encoders, but I would generally recommend the first one.
# libx265 - H.265 / HEVC - Mostly supported codec at similar efficiency to VP9. I would generally recommend VP9 over this because VP9 is free and has wider support.
# libx264 - H.264 / AVC - Very widely supported codec that's faster to encode, but is less compact. I wouldn't recommend this, unless you need maximum compatibility.
# libvvenc - H.266 / VVC - Mostly unsupported codec that's very slow to encode, but is much more compact. I wouldn't recommend this, unless you know what you're doing.
# There are also hardware encoders available for Nvidia and AMD GPUs for H.264, H.265, and AV1. These are generally significantly faster, but with lower maximum efficiency than their CPU-only counterparts. Their availability and capabilities depend on your specific GPU model. Experiment with what works.
# h264_nvenc, hevc_nvenc, av1_nvenc, h264_amf, hevc_amf, av1_amf
videoEncoder=libsvtav1

# The average bitrate for the video. Expressed in bits/s by default.
# There is no guarantee the encoder will hit this bitrate.
# Can be any number, optionally followed by an SI unit prefix (K, M, G), or a power-of-1024 prefix (Ki, Mi, Gi), optionally followed by a B, to express the number in bytes/s instead.
videoBitrate=640KiB

# Adjusts the video bitrate to get the total size of the file to specified number. Expressed with the same syntax as the video bitrate.
# Requires ffprobe or a specified end time or duration. Overrides bitrate if not empty.
# Accounts for audio, but not subtitles or any other attachments. Some encoders are bad at hitting a bitrate target, so this value may need to be about 10% lower than the actual target size. Two-pass encoding may help hitting a more exact size.
targetSize=

# The somewhat arbitrary "quality" of the video. Differs based on the encoder. Overrides bitrate and target size if not empty.
# Lower values use a higher bitrate, but retain more quality. 0 is (usually) not lossless. The allowed values are:
# VP9: 0-63, AV1: 0-63, HEVC: 0-51, AVC: 0-51, VVC: 0-63
quality=30

# The somewhat arbitrary speed preset of the video encoders. Differs based on the encoder.
# Lower values are slower, but compress the video better. The allowed values are:
# VP9: 0-5, AV1 (SVT): 0-13, AV1 (AOM): 0-6, HEVC: 0-9, AVC: 0-9, VVC: 0-4, nvenc: 0-6, amf: 0-2, av1_amf: 0-3
speed=4

# Runs the encode twice with a faster first pass. This mainly helps better target an exact average bitrate (or filesize), but also gives slightly better quality when doing so.
# For many encoders, this either does nothing (wastes time) or errors if used with a constant quality.
# Except for libvpx and libaom-av1, where it can (and may be desired to) be used at all times.
# true / false
twoPass=false

# What pixel format to use for encoding.
# Can be any string supported by your ffmpeg installation, or empty to choose automatically based on the input.
# Popular formats are yuv420p, yuv422p, and yuv444p for 8-bit depth, or the same formats, but with the bit depth (10, 12, or 16) appended e.g. yuv420p10le, yuv422p16le
# Recommended to leave empty or set to yuv420p unless you know what you're doing.
# 420 encodes the color channels at quarter resolution, 422 at half resolution, and 444 at full resolution.
# Higher resolutions and bit depths take longer to encode and may not be well supported by some encoders.
# Unless you're downscaling, there is little reason to encode color channels at a higher resolution than what is in the source.
pixelFormat=

# Whether to produce a lossless encode of the video.
# This will ignore bitrate and quality and produce a very large file.
# Not supported by libvvenc.
# true / false
lossless=false



# ------------- AUDIO OPTIONS -------------

# The encoder for the audio. Specifies the audio codec.
# Can be any string that's supported by your ffmpeg installation, but I only support the following popular ones. Others may work with limited configuration options.
# Leaving this option empty will not encode an audio stream.
# copy - Copies the audio stream without reencoding. No other audio options will be applied and trimming may not work well.
# libopus - Opus - Well-supported and very efficient codec. I would generally recommend using this, unless you need lossless or specific compatibility.
# flac - FLAC - Basically the only lossless codec
# libmp3lame - MP3 - Much lower compression efficiency, but maximum compatibility
audioEncoder=libopus

# The average bitrate for the audio. Expressed in bits/s by default.
# Can be any number, optionally followed by an SI unit prefix (K, M, G), or a power-of-1024 prefix (Ki, Mi, Gi), optionally followed by a B, to express the number in bytes/s instead.
# For stereo Opus, 64-128Ki is recommended for audibly lossless quality
# MP3 requires roughly 2.5x the bitrate for the same quality
# Ignored for FLAC
audioBitrate=128Ki

# The amount of output audio channels.
# Can be any positive integer or empty, in which case it will copy the input channel count.
audioChannels=



# ------------- OTHER OPTIONS -------------

# Whether to remove subtitles / metadata / chapters
# true / false
removeSubtitles=false
removeMetadata=false
removeChapters=false

# Whether to report how long the encode took
# true / false
benchmark=false

# The metric to use to compare the quality of the encode result to the original.
# This needs videos of equal resolution and frame count and will thus not work with filters.
# Can be any string that's supported by your ffmpeg installation, but I only support the following ones. Others probably work if they require no additional configuration options.
# Leaving this empty will not perform a comparison.
# libvmaf - VMAF - Supposedly one of the best metrics currently supported by ffmpeg.
# ssim - SSIM - A reasonable quality metric, somewhat accounting for human perception.
# xpsnr - XPSNR - Supposedly also one of the better metrics currently supported by ffmpeg.
compare=
# What method to use for synchronizing the compared streams.
# Sometimes the input and output frames don't line up. This gives a very low and incorrect result.
# Possible options are 0 (default timestamp sync), 1 (set input framerates to 1), 2 (nearest timestamp)
compareSync=1
# Compare only every n-th frame to speed up the comparison process.
# Can be any positive integer, but prime numbers are recommended.
compareInterval=1

# Any extra options you wish to append to the input / output option list.
# An option starts with a - and runs until the next word starting with a - or until the end.
# Therefore arguments must not be escaped like they would be when entered from a shell.
extraInputOptions=
extraOutputOptions=



# ------------- CPU OPTIONS -------------

# The process priority for ffmpeg
# Must be one of the following: Idle, BelowNormal, Normal, AboveNormal, High, RealTime
# The default of BelowNormal lets most other applications take priority and run normally. Normal may cause lag, and AboveNormal and higher may freeze your computer.
priority=BelowNormal

# The processor affinity for ffmpeg. Specifies which or how many cores may be used.
# Can be either a positive integer (up to 64) indicating how many cores may be used,
# a binary value starting with "0b" indicating exactly which cores may be used (bit 0 is the first core, and so on),
# or 0 to allow all cores.
cpuAffinity=0