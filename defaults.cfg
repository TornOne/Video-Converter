# ------------- FILE OPTIONS -------------

# Relative or absolute path to ffmpeg.exe
ffmpeg=ffmpeg.exe

# Relative or absolute paths to source files separated by \n. Each will be converted separately.
inputFiles=

# The directory in which the converted files will be placed.
# If empty, the converted files will be placed alongside the source files.
outputDirectory=

# Whether to create the output directory if it doesn't exist
# true / false
createDirectoryIfNeeded=true

# The strings added before and/or after the input file name(s) to make the output file name(s)
outputPrefix=
outputSuffix= out

# The file extension. Usually specifies the container.
# Can be any string. If empty, no leading dot is included.
# Some popular examples:
# mkv - Matroska - Supports most formats, ususally a safe choice
# webm - Subset of Matroska that works in web browsers - supports VP8, VP9, AV1 video, and Vorbis (ogg) and Opus audio
# mp4 - MPEG-4 - Common container that support many formats (H.264, H.265, AV1 video, AAC, MP3, FLAC, Opus audio, and others), but there is little reason to use this over mkv
outputExtension=webm

# Whether to overwrite any existing files. Will never overwrite the source files.
# true / false
overwrite=true



# ------------- VIDEO OPTIONS -------------

# The encoder for the video. Specifies the video codec.
# Can be any string that's supported by your ffmpeg installation, but I only support the following popular ones. Others may work with limited confiuration options.
# Leaving this option empty will not encode a video stream.
# copy - Copies the video stream without reencoding.  No other video options will be applied and trimming may not work well.
# libvpx-vp9 - VP9 - Well-supported and fairly efficient codec
# libsvtav1, libaom-av1, librav1e - AV1 - Mostly supported codec that's slower to encode but is more compact. Has 3 different encoders, but I would generally recommend the first one.
# libx265 - H.265 / AVC - Mostly supported codec at similar efficiency to VP9. I would generally recommend VP9 over this because VP9 is free and has wider support.
# libx264 - H.264 / HEVC - Very widely supported codec that's faster to encode, but is less compact. I wouldn't recommend this, unless you need maximum compatibility.
# libvvenc - H.266 / VVC - Mostly unsupported codec that's very slow to encode, but is much more compact. I wouldn't recommend this, unless you know what you're doing.
videoEncoder=libvpx-vp9



# ------------- AUDIO OPTIONS -------------

# The encoder for the audio. Specifies the audio codec.
# Can be any string that's supported by your ffmpeg installation, but I only support the following popular ones. Others may work with limited configuration options.
# Leaving this option empty will not encode an audio stream.
# copy - Copies the audio stream without reencoding. No other audio options will be applied and trimming may not work well.
# libopus - Opus - Well-supported and very efficient codec. I would generally recommend using this, unless you need lossless or specific compatibility.
# flac - FLAC - Basically the only lossless codec
# aac - AAC - Reasonable efficiency
# libmp3lame - MP3 - Very low quality, but maximum compatibility
audioEncoder=libopus



# ------------- CPU OPTIONS -------------

# The process priority for ffmpeg
# Must be one of the following: Idle, BelowNormal, Normal, AboveNormal, High, RealTime
# The defualt of BelowNormal lets most other applications take priority and run normally. Normal may cause lag, and AboveNormal and higher may freeze your computer.
priority=BelowNormal

# The processor affinity for ffmpeg. Specifies which or how many cores may be used.
# Can be either a positive integer (up to 64) indicating how many cores may be used,
# a binary value starting with "0b" indicating exactly which cores may be used (bit 0 is the first core, and so on),
# or 0 to allow all cores.
cpuAffinity=0